#!/usr/bin/env python3
"""
Setup script to create environment variables for Orphanet SM Loader
Based on user rules, creates system/.env file with Supabase credentials
"""

import os
from pathlib import Path

def main():
    """Setup environment variables"""
    
    # Create system directory if it doesn't exist
    system_dir = Path(__file__).parent / "system"
    system_dir.mkdir(exist_ok=True)
    
    env_file = system_dir / ".env"
    
    print("Orphanet SM Loader Environment Setup")
    print("=" * 40)
    
    # Check if .env already exists
    if env_file.exists():
        print(f"Environment file already exists: {env_file}")
        overwrite = input("Do you want to overwrite it? (y/N): ").lower().strip()
        if overwrite != 'y':
            print("Setup cancelled.")
            return
    
    # Get credentials from user
    print("\nPlease provide your Supabase credentials:")
    print("(You can find these in your Supabase dashboard under Settings > API)")
    
    supabase_url = input("Supabase URL: ").strip()
    if not supabase_url.startswith('https://'):
        print("Warning: Supabase URL should start with https://")
    
    supabase_key = input("Supabase Anonymous Key: ").strip()
    
    # Optional: Also collect service key if needed
    print("\nOptional (for advanced features):")
    supabase_service_key = input("Supabase Service Key (optional): ").strip()
    
    # Create .env content
    env_content = f"""# Orphanet SM Loader Environment Variables
# Generated by setup_env.py

# Supabase Configuration
SUPABASE_URL={supabase_url}
SUPABASE_KEY={supabase_key}
SUPABASE_ANON_KEY={supabase_key}
"""
    
    if supabase_service_key:
        env_content += f"SUPABASE_SERVICE_KEY={supabase_service_key}\n"
    
    env_content += """
# Additional environment variables can be added here
# ANTHROPIC_API_KEY=your_anthropic_key_here
"""
    
    # Write to file
    try:
        with open(env_file, 'w') as f:
            f.write(env_content)
        
        print(f"\n✓ Environment file created: {env_file}")
        print("\nYou can now run the loader with:")
        print("python orphanet_supabase_loader.py -d file --stats")
        print("\nOr test the connection with:")
        print("python test_sm_loader.py")
        
        # Make sure python-dotenv is available
        try:
            import dotenv
            print("\n✓ python-dotenv is available")
        except ImportError:
            print("\n⚠️  python-dotenv not found. Install it with:")
            print("pip install python-dotenv")
        
        # Check for supabase client
        try:
            import supabase
            print("✓ supabase client is available")
        except ImportError:
            print("\n⚠️  supabase client not found. Install it with:")
            print("pip install supabase")
        
    except Exception as e:
        print(f"Error creating environment file: {e}")


if __name__ == "__main__":
    main()